#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100
#define TRUE 1
#define FALSE 0

// Queue structure for BFS
typedef struct {
    int items[MAX_NODES];
    int front;
    int rear;
} Queue;

// Initialize the queue
void initQueue(Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is empty
int isEmpty(Queue *q) {
    return q->rear == -1;
}

// Enqueue an element
void enqueue(Queue *q, int value) {
    if (q->rear == MAX_NODES - 1)
        printf("\nQueue is Full!!");
    else {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

// Dequeue an element
int dequeue(Queue *q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty");
        item = -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            // Reset the queue
            q->front = q->rear = -1;
        }
    }
    return item;
}

// Function to print the matrix
void printMatrix(int matrix[][MAX_NODES], int nodes) {
    for (int i = 0; i < nodes; i++) {
        for (int j = 0; j < nodes; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// BFS algorithm
void bfs(int graph[][MAX_NODES], int startNode, int nodes) {
    Queue q;
    initQueue(&q);

    int visited[nodes];
    for (int i = 0; i < nodes; i++) {
        visited[i] = FALSE;
    }

    // Start by visiting the start node
    visited[startNode] = TRUE;
    enqueue(&q, startNode);

    while (!isEmpty(&q)) {
        int current = dequeue(&q);
        printf("%d ", current);

        for (int i = 0; i < nodes; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                visited[i] = TRUE;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

int main() {
    int graph[MAX_NODES][MAX_NODES] = {
        {0, 1, 0, 0, 0},
        {1, 0, 1, 1, 0},
        {0, 1, 0, 0, 0},
        {0, 1, 0, 0, 1},
        {0, 0, 0, 1, 0}
    };
    int nodes = 5;

    printf("Adjacency Matrix:\n");
    printMatrix(graph, nodes);

    printf("BFS starting from node 0:\n");
    bfs(graph, 0, nodes);

    return 0;
}
