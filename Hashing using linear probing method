#include <stdio.h>
#include <stdlib.h>

// Define the structure for a hash table
typedef struct HashTable {
    int size;
    int* table;
} HashTable;

// Function to create a new hash table
HashTable* createHashTable(int size) {
    HashTable* newTable = (HashTable*)malloc(sizeof(HashTable));
    if (!newTable) {
        printf("Memory error\n");
        return NULL;
    }
    newTable->size = size;
    newTable->table = (int*)malloc(sizeof(int) * size);
    if (!newTable->table) {
        printf("Memory error\n");
        free(newTable);
        return NULL;
    }
    for (int i = 0; i < size; i++) {
        newTable->table[i] = -1;
    }
    return newTable;
}

// Function to hash a key
int hashFunction(HashTable* table, int key) {
    return key % table->size;
}

// Function to insert a key into the hash table
void insertKey(HashTable* table, int key) {
    int index = hashFunction(table, key);
    while (table->table[index] != -1) {
        index = (index + 1) % table->size;
    }
    table->table[index] = key;
}

// Function to search for a key in the hash table
int searchKey(HashTable* table, int key) {
    int index = hashFunction(table, key);
    while (table->table[index] != -1) {
        if (table->table[index] == key) {
            return 1;
        }
        index = (index + 1) % table->size;
    }
    return 0;
}

int main() {
    HashTable* table = createHashTable(10);
    insertKey(table, 5);
    insertKey(table, 10);
    insertKey(table, 15);
    printf("Searching for 5: %d\n", searchKey(table, 5));
    printf("Searching for 20: %d\n", searchKey(table, 20));
    return 0;
}
