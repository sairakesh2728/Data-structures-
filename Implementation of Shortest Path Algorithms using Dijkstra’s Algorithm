#include <stdio.h>
#include <stdlib.h>

#define V 6

void dijkstra(int graph[V][V], int start) {
    int distance[V];
    int parent[V];
    int i, j, min, u, v;

    for (i = 0; i < V; i++) {
        distance[i] = INT_MAX;
        parent[i] = -1;
    }

    distance[start] = 0;

    for (i = 0; i < V - 1; i++) {
        min = INT_MAX;
        for (j = 0; j < V; j++) {
            if (distance[j] < min && distance[j] != INT_MAX) {
                min = distance[j];
                u = j;
            }
        }

        for (j = 0; j < V; j++) {
            if (graph[u][j] && distance[u] + graph[u][j] < distance[j]) {
                distance[j] = distance[u] + graph[u][j];
                parent[j] = u;
            }
        }
    }

    printf("Shortest distances from node %d: ", start);
    for (i = 0; i < V; i++) {
        printf("%d ", distance[i]);
    }
    printf("\n");

    printf("Shortest paths from node %d: ", start);
    for (i = 1; i < V; i++) {
        if (parent[i] != -1) {
            printf("%d -> %d ", parent[i], i);
        }
    }
    printf("\n");
}

int main() {
    int graph[V][V] = {
        {0, 4, 0, 0, 0, 0},
        {4, 0, 8, 0, 0, 0},
        {0, 8, 0, 7, 0, 4},
        {0, 0, 7, 0, 9, 14},
        {0, 0, 0, 9, 0, 10},
        {0, 0, 4, 14, 10, 0}
    };

    dijkstra(graph, 0);

    return 0;
}
