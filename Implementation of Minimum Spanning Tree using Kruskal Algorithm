#include <stdio.h>
#include <stdlib.h>

#define V 6

void kruskal(int graph[V][V], int vertices) {
    int i, j, min;
    int visited[V];
    int parent[V];
    int edges[V][3];

    for (i = 0; i < V; i++) {
        visited[i] = 0;
    }

    for (i = 0; i < V; i++) {
        parent[i] = i;
    }

    int edgeCount = 0;
    int totalWeight = 0;

    for (i = 0; i < V; i++) {
        for (j = i + 1; j < V; j++) {
            if (graph[i][j] != 0) {
                edges[edgeCount][0] = i;
                edges[edgeCount][1] = j;
                edges[edgeCount][2] = graph[i][j];
                edgeCount++;
            }
        }
    }

    qsort(edges, edgeCount, sizeof(edges[0]), compare);

    for (i = 0; i < edgeCount; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        int weight = edges[i][2];

        if (find(parent, u) != find(parent, v)) {
            printf("Edge (%d, %d) with weight %d\n", u, v, weight);
            totalWeight += weight;
            unionSets(parent, u, v);
        }
    }

    printf("Minimum Spanning Tree weight: %d\n", totalWeight);
}

int find(int parent[], int i) {
    if (parent[i] == i) {
        return i;
    }
    return find(parent, parent[i]);
}

void unionSets(int parent[], int x, int y) {
    int xRoot = find(parent, x);
    int yRoot = find(parent, y);

    parent[xRoot] = yRoot;
}

int compare(const void *a, const void *b) {
    int *edgeA = (int *)a;
    int *edgeB = (int *)b;

    return (*edgeB - *edgeA);
}

int main() {
    int graph[V][V] = {
        {0, 2, 0, 6, 0, 0},
        {2, 0, 3, 8, 5, 0},
        {0, 3, 0, 0, 7, 1},
        {6, 8, 0, 0, 0, 2},
        {0, 5, 7, 0, 0, 3},
        {0, 0, 1, 2, 3, 0}
    };

    kruskal(graph, V);

    return 0;
}
